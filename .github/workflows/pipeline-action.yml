name: Veracode-Pipeline
'on':
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: see who am
        run: whoami
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
      - name: Restore dependencies
        run: nuget restore Verademo-dotnet.sln
      - name: Clean Default Build
        run: 'msbuild Verademo-dotnet.sln /t:clean'
      - name: Build - was dotnet build --no-restore
        run: >-
          msbuild.exe Verademo-dotnet.sln /p:DeployOnBuild=true
          /p:WebPublishMethod=Package /p:PackageAsSingleFile=false
          /p:SkipInvalidConfigurations=true /p:PackageLocation=./..
          /p:DebugSymbols=true /t:build /p:platform="Any CPU" /p:configuration="Debug"
       # Upload the artifact of the zip archive
       
      - name: List files in repo and zip artifact
        run: |
          dir ${{ github.workspace }}
          Compress-Archive -Path ${{ github.workspace }} -DestinationPath Verademo-dotnet.zip
      - run: ls
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: VerademoZip
          path: "${{ github.workspace }}/Verademo-dotnet.zip"
          
      - name: Veracode Pipeline-Scan
        # You may pin to the exact commit or the version.
        # uses: veracode/Veracode-pipeline-scan-action@35aecef76c5365b8dea83c150852cdebc0991d2d
        uses: veracode/Veracode-pipeline-scan-action@v1.0.10
        with:
          # vid
          vid: '{{ secrets.VERACODE_API_ID }}'
          # vkey
          vkey: '{{ secrets.VERACODE_API_KEY }}'
          # Filename of the packaged application to upload and scan.
          file: ./Verademo-dotnet.zip
          # GITHUB_TOKEN or a repo scoped PAT.
          token: '{{ secrets.GH_TOKEN }}'
          # Name of the Veracode default policy or custom-built policy to apply to the scan results.
          veracode_policy_name: 'Test'
          # DPERECATED, WILL BE REMOVED WITH NEXT VERSION - Name of the security policy to download as a file. Required only if you want to download the configuration for a custom policy defined by your organization. After downloading the policy, you can provide this file in a subsequent command using the policy_file parameter.
          # request_policy: # optional
          # Fail the pipeline job if the scan finds flaws of the specified severities. Enter a comma-separated list of severities in quotation marks.
          # fail_on_severity: # optional
          # Fail the pipeline job if the scan finds flaws of the specified CWEs. Enter a comma-separated list of CWE IDs.
          # fail_on_cwe: # optional
          # Filter the flaws that exist in the specified baseline file and show only the additional flaws in the current scan.
          baseline_file: results.json
          # DPERECATED, WILL BE REMOVED WITH NEXT VERSION - Name of the Veracode default policy rule to apply to the scan results. You can only use this parameter with a Veracode default policy.
          ## policy_name: # optional
          # Name of the local policy file you want to apply to the scan results.
          ## policy_file: # optional
          # Amount of time, in minutes, for the Pipeline Scan to wait before reporting an unsuccessful scan if the scan does not complete. Default is 60 minutes, which is also the maximum value.
          ## timeout: # optional
          # Enter true to show detailed messages for each issue in the results summary.
          issue_details: true
          # Enter true to show a human-readable results summary on the console. Default is true.
         # summary_display: # optional
          # Enter true to show the JSON containing the scan results on the console. Default is false.
          # json_display: # optional
          # Enter true to display detailed messages in the scan results. Default is false.
          #verbose: # optional
          # Enter true to save the scan results as a human-readable file. Default is false.
         # summary_output: # optional
          # Enter the filename of the scan results summary file. The file is stored in the current directory. Default is results.txt.
          #summary_output_file: # optional
          # Enter true to save the scan results in JSON format. Default is true.
          #json_output: # optional
          # Rename the JSON file that contains the scan results. The file is stored in the current directory. Default filename is results.json.
          #json_output_file: # optional
          # Enter the filename in the current directory to save results that violate pass-fail criteria. Default is filtered_results.json.
          #filtered_json_output_file: # optional
          # Enter the name of the CI/CD code repository that runs a Pipeline Scan. This parameter adds the repository name to the scan results, which can help you track scans across repositories.
         # project_name: # optional
          # Enter the source control URL for the CI/CD code repository that runs a Pipeline Scan.
         # project_url: # optional
          # Enter the source control reference, revision, or branch for the CI/CD code repository that runs a Pipeline Scan.
          #project_ref: # optional
          # Enter the [application profile](https://docs.veracode.com/r/request_profile) ID for the application you want to upload and scan.
         # app_id: # optional
          # Enter one these values, which are case-sensitive, for the type of development stage: Development, Testing, Release.
         # development_stage: # optional
          # Enable debug mode. 1 for on
          debug: 1
          # Enable the storage of a baseline file. Takes true or fales
          #store_baseline_file: true
          # Enter the branch name where the baseline file should be stored
         # store_baseline_file_branch: # optional
          # From which results should the baseline file be created. standard = full results || filtered = filtered results
         # create_baseline_from:
          # Fail the build upon findings. Takes true or false
          #fail_build: # optional
          # Enter a case-sensitive, comma-separated list of name patterns that represent the names of the modules to scan as top-level modules. Veracode identifies these modules during prescan. The * wildcard matches zero or more characters. The ? wildcard matches exactly one character. For example, to include various module names that contain module: --include "module 1, module-*, module2.jar". The scan results show the names of the modules that Veracode identified and the modules included in the scan. This parameter does not pause, stop, or impact the performance of your pipeline.
          #include: # optional
                
